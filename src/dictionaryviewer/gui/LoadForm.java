/*
 * LoadForm.java
 *
 * Created on May 18, 2010, 11:14:28 PM
 */

package dictionaryviewer.gui;

import dictionaryviewer.BigFile;
import dictionaryviewer.DictEntry;
import dictionaryviewer.Dictionary;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author hoa
 */
public class LoadForm extends javax.swing.JFrame {
    //private int         numberEntriesRead;//Modified on Jun 09, 2010. Remove this variable cause' it's not necessary.
    private Dictionary  dict;

    /** Creates new form LoadForm */
    public LoadForm() {
        initComponents();

        //Customize
        this.setAlwaysOnTop(true);
        progressBar.setStringPainted(true);

        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        // Determine the new location of the window
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;
        // Move the window
        this.setLocation(x, y);
    }

    /**
     * Handle big file.
     * Load data from file into texgt area. Instantly, create linked list.
     * @param name of file
     * @return true if file is loaded successfully. Otherwise, return false.
     * Created on   : 17 May 2010
     * Last modified: 23 May 2010
     * Version      : 1.0.1
     *
     * CHANGE LOGS:
     * - 23 May 2010:
         * Modified: Check file is exist before load file.
     * - 18 May 2010:
         * Problem: TextArea could not display the large text data (take from large text file).
         * Fixed on 18 May 2010. Cause coder did not change "dict.txt" (sample and small file) to "jargon.dict" (large file).
     * - 17 May 2010:
         * Problem: Could not read the last word and definition.
         * Fixed on 18 May 2010.
     */

    private boolean input(String fileName) {
        try {
            BigFile file        = new BigFile(fileName);//============================
            if (file.isExist() == false)                //Last modified on 23 May 2010
                return false;                           //============================

            //If file is loaded successfully.
            dict                = new Dictionary();
            String word         = "";
            String definition   = "";
            boolean newWord     = true; //Flag to handle new word.
            
            for (String line : file) {
                if (line.length() <= 0) {
                    definition += "\n";
                    continue;
                }

                if (line.substring(0, 1).trim().length() == 0) {
                    newWord = false;//Handle the old word.
                    definition += line + "\n";
                    continue;//Ignore below code lines if method is reading definition lines.
                }
                if (word.length() > 0 && definition.length() > 0) {
                    dict.add(new DictEntry(word, definition));//Add to linked list.
                    word = "";
                    definition = "";
                    newWord = true;//Handle the new word.
                }
                if (newWord == true) {
                    word = line.trim();
                }
            }
            /*
             * Modified: 18 May 2010
             * Four below lines fix the problem which could not read the last word and definition.
             */
            dict.add(new DictEntry(word, definition));

            //
        } catch (Exception ex) {
            Logger.getLogger(DictionaryViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textFilename = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        lblNotice = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textFilename.setText("jargon.dict");

        jLabel1.setText("Filename");

        progressBar.setMaximumSize(new java.awt.Dimension(32767, 27));
        progressBar.setMinimumSize(new java.awt.Dimension(10, 27));

        lblNotice.setText("Enter the name of dictionary file to load data");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNotice, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFilename, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoad)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNotice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        if (dict == null) {
            if (this.input(textFilename.getText())) {
                this.btnLoad.setText("Enter");
                this.textFilename.setEnabled(false);
                this.progressBar.setValue(100);
            } else {
                lblNotice.setText(textFilename.getText() + " is not exist. Enter again, please!");
            }
        } else {
            //Try to load form.
            try {
                new DictionaryViewer(dict).setVisible(true);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(LoadForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(LoadForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(LoadForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            //And close current form.
            this.dispose();
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoadForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblNotice;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField textFilename;
    // End of variables declaration//GEN-END:variables

}
